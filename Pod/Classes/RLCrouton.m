/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"


#import "RLCrouton.h"

@implementation RLKeyValue

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithKey: (NSString *) Key Value: (NSString *) Value
{
  self = [super init];
  if (self)  {
    _Key = Key;
    _keyIsSet = YES;
    _Value = Value;
    _valueIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"Key"])
    {
      _Key = [decoder decodeObjectForKey: @"Key"];
      _keyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"Value"])
    {
      _Value = [decoder decodeObjectForKey: @"Value"];
      _valueIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_keyIsSet)
  {
    [encoder encodeObject: _Key forKey: @"Key"];
  }
  if (_valueIsSet)
  {
    [encoder encodeObject: _Value forKey: @"Value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _keyIsSet ? 2654435761 : 0;
  if (_keyIsSet)
  {
    hash = (hash * 31) ^ [_Key hash];
  }
  hash = (hash * 31) ^ _valueIsSet ? 2654435761 : 0;
  if (_valueIsSet)
  {
    hash = (hash * 31) ^ [_Value hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLKeyValue class]]) {
    return NO;
  }
  RLKeyValue *other = (RLKeyValue *)anObject;
  if ((_keyIsSet != other->_keyIsSet) ||
      (_keyIsSet && ((_Key || other->_Key) && ![_Key isEqual:other->_Key]))) {
    return NO;
  }
  if ((_valueIsSet != other->_valueIsSet) ||
      (_valueIsSet && ((_Value || other->_Value) && ![_Value isEqual:other->_Value]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLKeyValue * val = [RLKeyValue new];
  val.Key = [self.Key copy];
  val.Value = [self.Value copy];
  return val;
}

- (void) setKey: (NSString *) Key {
  _Key = Key;
  _keyIsSet = YES;
}

- (void) unsetKey {
  _Key = nil;
  _keyIsSet = NO;
}

- (void) setValue: (NSString *) Value {
  _Value = Value;
  _valueIsSet = YES;
}

- (void) unsetValue {
  _Value = nil;
  _valueIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.Key = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.Value = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"KeyValue" error: __thriftError]) return NO;
  if (_keyIsSet) {
    if (_Key != nil) {
      if (![outProtocol writeFieldBeginWithName: @"Key" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _Key error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_valueIsSet) {
    if (_Value != nil) {
      if (![outProtocol writeFieldBeginWithName: @"Value" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _Value error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_keyIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"Key"}];
    }
  }
  if (!_valueIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"Value"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLKeyValue("];
  [ms appendString: @"Key:"];
  [ms appendFormat: @"\"%@\"", _Key];
  [ms appendString: @",Value:"];
  [ms appendFormat: @"\"%@\"", _Value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLNamedCounter

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (NSString *) Name Value: (SInt64) Value
{
  self = [super init];
  if (self)  {
    _Name = Name;
    _nameIsSet = YES;
    _Value = Value;
    _valueIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"Name"])
    {
      _Name = [decoder decodeObjectForKey: @"Name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"Value"])
    {
      _Value = [decoder decodeInt64ForKey: @"Value"];
      _valueIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _Name forKey: @"Name"];
  }
  if (_valueIsSet)
  {
    [encoder encodeInt64: _Value forKey: @"Value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_Name hash];
  }
  hash = (hash * 31) ^ _valueIsSet ? 2654435761 : 0;
  if (_valueIsSet)
  {
    hash = (hash * 31) ^ [@(_Value) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLNamedCounter class]]) {
    return NO;
  }
  RLNamedCounter *other = (RLNamedCounter *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_Name || other->_Name) && ![_Name isEqual:other->_Name]))) {
    return NO;
  }
  if ((_valueIsSet != other->_valueIsSet) ||
      (_valueIsSet && (_Value != other->_Value))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLNamedCounter * val = [RLNamedCounter new];
  val.Name = [self.Name copy];
  val.Value = self.Value;
  return val;
}

- (void) setName: (NSString *) Name {
  _Name = Name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _Name = nil;
  _nameIsSet = NO;
}

- (void) setValue: (SInt64) Value {
  _Value = Value;
  _valueIsSet = YES;
}

- (void) unsetValue {
  _valueIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.Name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.Value = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"NamedCounter" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_Name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"Name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _Name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_valueIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"Value" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _Value error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_nameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"Name"}];
    }
  }
  if (!_valueIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"Value"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLNamedCounter("];
  [ms appendString: @"Name:"];
  [ms appendFormat: @"\"%@\"", _Name];
  [ms appendString: @",Value:"];
  [ms appendFormat: @"%qi", _Value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLRuntime

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithGuid: (NSString *) guid start_micros: (SInt64) start_micros group_name: (NSString *) group_name attrs: (NSArray<RLKeyValue *> *) attrs
{
  self = [super init];
  if (self)  {
    _guid = guid;
    _guidIsSet = YES;
    _start_micros = start_micros;
    _start_microsIsSet = YES;
    _group_name = group_name;
    _group_nameIsSet = YES;
    _attrs = [attrs mutableCopy];
    _attrsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"guid"])
    {
      _guid = [decoder decodeObjectForKey: @"guid"];
      _guidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"start_micros"])
    {
      _start_micros = [decoder decodeInt64ForKey: @"start_micros"];
      _start_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"group_name"])
    {
      _group_name = [decoder decodeObjectForKey: @"group_name"];
      _group_nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"attrs"])
    {
      _attrs = [decoder decodeObjectForKey: @"attrs"];
      _attrsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_guidIsSet)
  {
    [encoder encodeObject: _guid forKey: @"guid"];
  }
  if (_start_microsIsSet)
  {
    [encoder encodeInt64: _start_micros forKey: @"start_micros"];
  }
  if (_group_nameIsSet)
  {
    [encoder encodeObject: _group_name forKey: @"group_name"];
  }
  if (_attrsIsSet)
  {
    [encoder encodeObject: _attrs forKey: @"attrs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _guidIsSet ? 2654435761 : 0;
  if (_guidIsSet)
  {
    hash = (hash * 31) ^ [_guid hash];
  }
  hash = (hash * 31) ^ _start_microsIsSet ? 2654435761 : 0;
  if (_start_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_start_micros) hash];
  }
  hash = (hash * 31) ^ _group_nameIsSet ? 2654435761 : 0;
  if (_group_nameIsSet)
  {
    hash = (hash * 31) ^ [_group_name hash];
  }
  hash = (hash * 31) ^ _attrsIsSet ? 2654435761 : 0;
  if (_attrsIsSet)
  {
    hash = (hash * 31) ^ [_attrs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLRuntime class]]) {
    return NO;
  }
  RLRuntime *other = (RLRuntime *)anObject;
  if ((_guidIsSet != other->_guidIsSet) ||
      (_guidIsSet && ((_guid || other->_guid) && ![_guid isEqual:other->_guid]))) {
    return NO;
  }
  if ((_start_microsIsSet != other->_start_microsIsSet) ||
      (_start_microsIsSet && (_start_micros != other->_start_micros))) {
    return NO;
  }
  if ((_group_nameIsSet != other->_group_nameIsSet) ||
      (_group_nameIsSet && ((_group_name || other->_group_name) && ![_group_name isEqual:other->_group_name]))) {
    return NO;
  }
  if ((_attrsIsSet != other->_attrsIsSet) ||
      (_attrsIsSet && ((_attrs || other->_attrs) && ![_attrs isEqual:other->_attrs]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLRuntime * val = [RLRuntime new];
  val.guid = [self.guid copy];
  val.start_micros = self.start_micros;
  val.group_name = [self.group_name copy];
  val.attrs = [self.attrs copy];
  return val;
}

- (void) setGuid: (NSString *) guid {
  _guid = guid;
  _guidIsSet = YES;
}

- (void) unsetGuid {
  _guid = nil;
  _guidIsSet = NO;
}

- (void) setStart_micros: (SInt64) start_micros {
  _start_micros = start_micros;
  _start_microsIsSet = YES;
}

- (void) unsetStart_micros {
  _start_microsIsSet = NO;
}

- (void) setGroup_name: (NSString *) group_name {
  _group_name = group_name;
  _group_nameIsSet = YES;
}

- (void) unsetGroup_name {
  _group_name = nil;
  _group_nameIsSet = NO;
}

- (void) setAttrs: (NSMutableArray<RLKeyValue *> *) attrs {
  _attrs = attrs;
  _attrsIsSet = YES;
}

- (void) unsetAttrs {
  _attrs = nil;
  _attrsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.guid = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.start_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.group_name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size0;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            RLKeyValue *_elem2 = [[RLKeyValue alloc] init];
            if (![_elem2 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.attrs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Runtime" error: __thriftError]) return NO;
  if (_guidIsSet) {
    if (_guid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"guid" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _guid error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_start_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"start_micros" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _start_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_group_nameIsSet) {
    if (_group_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"group_name" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _group_name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_attrsIsSet) {
    if (_attrs != nil) {
      if (![outProtocol writeFieldBeginWithName: @"attrs" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_attrs count] error: __thriftError]) return NO;
        int idx4;
        for (idx4 = 0; idx4 < [_attrs count]; idx4++)
        {
          if (![[_attrs objectAtIndex: idx4] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLRuntime("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", _guid];
  [ms appendString: @",start_micros:"];
  [ms appendFormat: @"%qi", _start_micros];
  [ms appendString: @",group_name:"];
  [ms appendFormat: @"\"%@\"", _group_name];
  [ms appendString: @",attrs:"];
  [ms appendFormat: @"%@", _attrs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLLogRecord

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTimestamp_micros: (SInt64) timestamp_micros runtime_guid: (NSString *) runtime_guid span_guid: (NSString *) span_guid stable_name: (NSString *) stable_name message: (NSString *) message level: (NSString *) level thread_id: (SInt64) thread_id filename: (NSString *) filename line_number: (SInt64) line_number stack_frames: (NSArray<NSString *> *) stack_frames payload_json: (NSString *) payload_json error_flag: (BOOL) error_flag
{
  self = [super init];
  if (self)  {
    _timestamp_micros = timestamp_micros;
    _timestamp_microsIsSet = YES;
    _runtime_guid = runtime_guid;
    _runtime_guidIsSet = YES;
    _span_guid = span_guid;
    _span_guidIsSet = YES;
    _stable_name = stable_name;
    _stable_nameIsSet = YES;
    _message = message;
    _messageIsSet = YES;
    _level = level;
    _levelIsSet = YES;
    _thread_id = thread_id;
    _thread_idIsSet = YES;
    _filename = filename;
    _filenameIsSet = YES;
    _line_number = line_number;
    _line_numberIsSet = YES;
    _stack_frames = [stack_frames mutableCopy];
    _stack_framesIsSet = YES;
    _payload_json = payload_json;
    _payload_jsonIsSet = YES;
    _error_flag = error_flag;
    _error_flagIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"timestamp_micros"])
    {
      _timestamp_micros = [decoder decodeInt64ForKey: @"timestamp_micros"];
      _timestamp_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"runtime_guid"])
    {
      _runtime_guid = [decoder decodeObjectForKey: @"runtime_guid"];
      _runtime_guidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"span_guid"])
    {
      _span_guid = [decoder decodeObjectForKey: @"span_guid"];
      _span_guidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"stable_name"])
    {
      _stable_name = [decoder decodeObjectForKey: @"stable_name"];
      _stable_nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
    if ([decoder containsValueForKey: @"level"])
    {
      _level = [decoder decodeObjectForKey: @"level"];
      _levelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"thread_id"])
    {
      _thread_id = [decoder decodeInt64ForKey: @"thread_id"];
      _thread_idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"filename"])
    {
      _filename = [decoder decodeObjectForKey: @"filename"];
      _filenameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"line_number"])
    {
      _line_number = [decoder decodeInt64ForKey: @"line_number"];
      _line_numberIsSet = YES;
    }
    if ([decoder containsValueForKey: @"stack_frames"])
    {
      _stack_frames = [decoder decodeObjectForKey: @"stack_frames"];
      _stack_framesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"payload_json"])
    {
      _payload_json = [decoder decodeObjectForKey: @"payload_json"];
      _payload_jsonIsSet = YES;
    }
    if ([decoder containsValueForKey: @"error_flag"])
    {
      _error_flag = [decoder decodeBoolForKey: @"error_flag"];
      _error_flagIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_timestamp_microsIsSet)
  {
    [encoder encodeInt64: _timestamp_micros forKey: @"timestamp_micros"];
  }
  if (_runtime_guidIsSet)
  {
    [encoder encodeObject: _runtime_guid forKey: @"runtime_guid"];
  }
  if (_span_guidIsSet)
  {
    [encoder encodeObject: _span_guid forKey: @"span_guid"];
  }
  if (_stable_nameIsSet)
  {
    [encoder encodeObject: _stable_name forKey: @"stable_name"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
  if (_levelIsSet)
  {
    [encoder encodeObject: _level forKey: @"level"];
  }
  if (_thread_idIsSet)
  {
    [encoder encodeInt64: _thread_id forKey: @"thread_id"];
  }
  if (_filenameIsSet)
  {
    [encoder encodeObject: _filename forKey: @"filename"];
  }
  if (_line_numberIsSet)
  {
    [encoder encodeInt64: _line_number forKey: @"line_number"];
  }
  if (_stack_framesIsSet)
  {
    [encoder encodeObject: _stack_frames forKey: @"stack_frames"];
  }
  if (_payload_jsonIsSet)
  {
    [encoder encodeObject: _payload_json forKey: @"payload_json"];
  }
  if (_error_flagIsSet)
  {
    [encoder encodeBool: _error_flag forKey: @"error_flag"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _timestamp_microsIsSet ? 2654435761 : 0;
  if (_timestamp_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_timestamp_micros) hash];
  }
  hash = (hash * 31) ^ _runtime_guidIsSet ? 2654435761 : 0;
  if (_runtime_guidIsSet)
  {
    hash = (hash * 31) ^ [_runtime_guid hash];
  }
  hash = (hash * 31) ^ _span_guidIsSet ? 2654435761 : 0;
  if (_span_guidIsSet)
  {
    hash = (hash * 31) ^ [_span_guid hash];
  }
  hash = (hash * 31) ^ _stable_nameIsSet ? 2654435761 : 0;
  if (_stable_nameIsSet)
  {
    hash = (hash * 31) ^ [_stable_name hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  hash = (hash * 31) ^ _levelIsSet ? 2654435761 : 0;
  if (_levelIsSet)
  {
    hash = (hash * 31) ^ [_level hash];
  }
  hash = (hash * 31) ^ _thread_idIsSet ? 2654435761 : 0;
  if (_thread_idIsSet)
  {
    hash = (hash * 31) ^ [@(_thread_id) hash];
  }
  hash = (hash * 31) ^ _filenameIsSet ? 2654435761 : 0;
  if (_filenameIsSet)
  {
    hash = (hash * 31) ^ [_filename hash];
  }
  hash = (hash * 31) ^ _line_numberIsSet ? 2654435761 : 0;
  if (_line_numberIsSet)
  {
    hash = (hash * 31) ^ [@(_line_number) hash];
  }
  hash = (hash * 31) ^ _stack_framesIsSet ? 2654435761 : 0;
  if (_stack_framesIsSet)
  {
    hash = (hash * 31) ^ [_stack_frames hash];
  }
  hash = (hash * 31) ^ _payload_jsonIsSet ? 2654435761 : 0;
  if (_payload_jsonIsSet)
  {
    hash = (hash * 31) ^ [_payload_json hash];
  }
  hash = (hash * 31) ^ _error_flagIsSet ? 2654435761 : 0;
  if (_error_flagIsSet)
  {
    hash = (hash * 31) ^ [@(_error_flag) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLLogRecord class]]) {
    return NO;
  }
  RLLogRecord *other = (RLLogRecord *)anObject;
  if ((_timestamp_microsIsSet != other->_timestamp_microsIsSet) ||
      (_timestamp_microsIsSet && (_timestamp_micros != other->_timestamp_micros))) {
    return NO;
  }
  if ((_runtime_guidIsSet != other->_runtime_guidIsSet) ||
      (_runtime_guidIsSet && ((_runtime_guid || other->_runtime_guid) && ![_runtime_guid isEqual:other->_runtime_guid]))) {
    return NO;
  }
  if ((_span_guidIsSet != other->_span_guidIsSet) ||
      (_span_guidIsSet && ((_span_guid || other->_span_guid) && ![_span_guid isEqual:other->_span_guid]))) {
    return NO;
  }
  if ((_stable_nameIsSet != other->_stable_nameIsSet) ||
      (_stable_nameIsSet && ((_stable_name || other->_stable_name) && ![_stable_name isEqual:other->_stable_name]))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  if ((_levelIsSet != other->_levelIsSet) ||
      (_levelIsSet && ((_level || other->_level) && ![_level isEqual:other->_level]))) {
    return NO;
  }
  if ((_thread_idIsSet != other->_thread_idIsSet) ||
      (_thread_idIsSet && (_thread_id != other->_thread_id))) {
    return NO;
  }
  if ((_filenameIsSet != other->_filenameIsSet) ||
      (_filenameIsSet && ((_filename || other->_filename) && ![_filename isEqual:other->_filename]))) {
    return NO;
  }
  if ((_line_numberIsSet != other->_line_numberIsSet) ||
      (_line_numberIsSet && (_line_number != other->_line_number))) {
    return NO;
  }
  if ((_stack_framesIsSet != other->_stack_framesIsSet) ||
      (_stack_framesIsSet && ((_stack_frames || other->_stack_frames) && ![_stack_frames isEqual:other->_stack_frames]))) {
    return NO;
  }
  if ((_payload_jsonIsSet != other->_payload_jsonIsSet) ||
      (_payload_jsonIsSet && ((_payload_json || other->_payload_json) && ![_payload_json isEqual:other->_payload_json]))) {
    return NO;
  }
  if ((_error_flagIsSet != other->_error_flagIsSet) ||
      (_error_flagIsSet && (_error_flag != other->_error_flag))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLLogRecord * val = [RLLogRecord new];
  val.timestamp_micros = self.timestamp_micros;
  val.runtime_guid = [self.runtime_guid copy];
  val.span_guid = [self.span_guid copy];
  val.stable_name = [self.stable_name copy];
  val.message = [self.message copy];
  val.level = [self.level copy];
  val.thread_id = self.thread_id;
  val.filename = [self.filename copy];
  val.line_number = self.line_number;
  val.stack_frames = [self.stack_frames copy];
  val.payload_json = [self.payload_json copy];
  val.error_flag = self.error_flag;
  return val;
}

- (void) setTimestamp_micros: (SInt64) timestamp_micros {
  _timestamp_micros = timestamp_micros;
  _timestamp_microsIsSet = YES;
}

- (void) unsetTimestamp_micros {
  _timestamp_microsIsSet = NO;
}

- (void) setRuntime_guid: (NSString *) runtime_guid {
  _runtime_guid = runtime_guid;
  _runtime_guidIsSet = YES;
}

- (void) unsetRuntime_guid {
  _runtime_guid = nil;
  _runtime_guidIsSet = NO;
}

- (void) setSpan_guid: (NSString *) span_guid {
  _span_guid = span_guid;
  _span_guidIsSet = YES;
}

- (void) unsetSpan_guid {
  _span_guid = nil;
  _span_guidIsSet = NO;
}

- (void) setStable_name: (NSString *) stable_name {
  _stable_name = stable_name;
  _stable_nameIsSet = YES;
}

- (void) unsetStable_name {
  _stable_name = nil;
  _stable_nameIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (void) setLevel: (NSString *) level {
  _level = level;
  _levelIsSet = YES;
}

- (void) unsetLevel {
  _level = nil;
  _levelIsSet = NO;
}

- (void) setThread_id: (SInt64) thread_id {
  _thread_id = thread_id;
  _thread_idIsSet = YES;
}

- (void) unsetThread_id {
  _thread_idIsSet = NO;
}

- (void) setFilename: (NSString *) filename {
  _filename = filename;
  _filenameIsSet = YES;
}

- (void) unsetFilename {
  _filename = nil;
  _filenameIsSet = NO;
}

- (void) setLine_number: (SInt64) line_number {
  _line_number = line_number;
  _line_numberIsSet = YES;
}

- (void) unsetLine_number {
  _line_numberIsSet = NO;
}

- (void) setStack_frames: (NSMutableArray<NSString *> *) stack_frames {
  _stack_frames = stack_frames;
  _stack_framesIsSet = YES;
}

- (void) unsetStack_frames {
  _stack_frames = nil;
  _stack_framesIsSet = NO;
}

- (void) setPayload_json: (NSString *) payload_json {
  _payload_json = payload_json;
  _payload_jsonIsSet = YES;
}

- (void) unsetPayload_json {
  _payload_json = nil;
  _payload_jsonIsSet = NO;
}

- (void) setError_flag: (BOOL) error_flag {
  _error_flag = error_flag;
  _error_flagIsSet = YES;
}

- (void) unsetError_flag {
  _error_flagIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timestamp_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.runtime_guid = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.span_guid = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.stable_name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.level = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.thread_id = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.filename = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.line_number = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeLIST) {
          SInt32 _size5;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size5 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7;
            if (![inProtocol readString:&_elem7 error: __thriftError]) return NO;
            [fieldValue addObject: _elem7];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.stack_frames = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.payload_json = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 12:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.error_flag = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"LogRecord" error: __thriftError]) return NO;
  if (_timestamp_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timestamp_micros" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timestamp_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_runtime_guidIsSet) {
    if (_runtime_guid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"runtime_guid" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _runtime_guid error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_span_guidIsSet) {
    if (_span_guid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"span_guid" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _span_guid error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_stable_nameIsSet) {
    if (_stable_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"stable_name" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _stable_name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_levelIsSet) {
    if (_level != nil) {
      if (![outProtocol writeFieldBeginWithName: @"level" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _level error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_thread_idIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"thread_id" type: TTypeI64 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _thread_id error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_filenameIsSet) {
    if (_filename != nil) {
      if (![outProtocol writeFieldBeginWithName: @"filename" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeString: _filename error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_line_numberIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"line_number" type: TTypeI64 fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _line_number error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_stack_framesIsSet) {
    if (_stack_frames != nil) {
      if (![outProtocol writeFieldBeginWithName: @"stack_frames" type: TTypeLIST fieldID: 10 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_stack_frames count] error: __thriftError]) return NO;
        int idx9;
        for (idx9 = 0; idx9 < [_stack_frames count]; idx9++)
        {
          if (![outProtocol writeString: [_stack_frames objectAtIndex: idx9] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_payload_jsonIsSet) {
    if (_payload_json != nil) {
      if (![outProtocol writeFieldBeginWithName: @"payload_json" type: TTypeSTRING fieldID: 11 error: __thriftError]) return NO;
      if (![outProtocol writeString: _payload_json error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_error_flagIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"error_flag" type: TTypeBOOL fieldID: 12 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _error_flag error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLLogRecord("];
  [ms appendString: @"timestamp_micros:"];
  [ms appendFormat: @"%qi", _timestamp_micros];
  [ms appendString: @",runtime_guid:"];
  [ms appendFormat: @"\"%@\"", _runtime_guid];
  [ms appendString: @",span_guid:"];
  [ms appendFormat: @"\"%@\"", _span_guid];
  [ms appendString: @",stable_name:"];
  [ms appendFormat: @"\"%@\"", _stable_name];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @",level:"];
  [ms appendFormat: @"\"%@\"", _level];
  [ms appendString: @",thread_id:"];
  [ms appendFormat: @"%qi", _thread_id];
  [ms appendString: @",filename:"];
  [ms appendFormat: @"\"%@\"", _filename];
  [ms appendString: @",line_number:"];
  [ms appendFormat: @"%qi", _line_number];
  [ms appendString: @",stack_frames:"];
  [ms appendFormat: @"%@", _stack_frames];
  [ms appendString: @",payload_json:"];
  [ms appendFormat: @"\"%@\"", _payload_json];
  [ms appendString: @",error_flag:"];
  [ms appendFormat: @"%i", _error_flag];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLTraceJoinId

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTraceKey: (NSString *) TraceKey Value: (NSString *) Value
{
  self = [super init];
  if (self)  {
    _TraceKey = TraceKey;
    _traceKeyIsSet = YES;
    _Value = Value;
    _valueIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"TraceKey"])
    {
      _TraceKey = [decoder decodeObjectForKey: @"TraceKey"];
      _traceKeyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"Value"])
    {
      _Value = [decoder decodeObjectForKey: @"Value"];
      _valueIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_traceKeyIsSet)
  {
    [encoder encodeObject: _TraceKey forKey: @"TraceKey"];
  }
  if (_valueIsSet)
  {
    [encoder encodeObject: _Value forKey: @"Value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _traceKeyIsSet ? 2654435761 : 0;
  if (_traceKeyIsSet)
  {
    hash = (hash * 31) ^ [_TraceKey hash];
  }
  hash = (hash * 31) ^ _valueIsSet ? 2654435761 : 0;
  if (_valueIsSet)
  {
    hash = (hash * 31) ^ [_Value hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLTraceJoinId class]]) {
    return NO;
  }
  RLTraceJoinId *other = (RLTraceJoinId *)anObject;
  if ((_traceKeyIsSet != other->_traceKeyIsSet) ||
      (_traceKeyIsSet && ((_TraceKey || other->_TraceKey) && ![_TraceKey isEqual:other->_TraceKey]))) {
    return NO;
  }
  if ((_valueIsSet != other->_valueIsSet) ||
      (_valueIsSet && ((_Value || other->_Value) && ![_Value isEqual:other->_Value]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLTraceJoinId * val = [RLTraceJoinId new];
  val.TraceKey = [self.TraceKey copy];
  val.Value = [self.Value copy];
  return val;
}

- (void) setTraceKey: (NSString *) TraceKey {
  _TraceKey = TraceKey;
  _traceKeyIsSet = YES;
}

- (void) unsetTraceKey {
  _TraceKey = nil;
  _traceKeyIsSet = NO;
}

- (void) setValue: (NSString *) Value {
  _Value = Value;
  _valueIsSet = YES;
}

- (void) unsetValue {
  _Value = nil;
  _valueIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.TraceKey = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.Value = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"TraceJoinId" error: __thriftError]) return NO;
  if (_traceKeyIsSet) {
    if (_TraceKey != nil) {
      if (![outProtocol writeFieldBeginWithName: @"TraceKey" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _TraceKey error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_valueIsSet) {
    if (_Value != nil) {
      if (![outProtocol writeFieldBeginWithName: @"Value" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _Value error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_traceKeyIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"TraceKey"}];
    }
  }
  if (!_valueIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"Value"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLTraceJoinId("];
  [ms appendString: @"TraceKey:"];
  [ms appendFormat: @"\"%@\"", _TraceKey];
  [ms appendString: @",Value:"];
  [ms appendFormat: @"\"%@\"", _Value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLSpanRecord

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSpan_guid: (NSString *) span_guid runtime_guid: (NSString *) runtime_guid span_name: (NSString *) span_name join_ids: (NSArray<RLTraceJoinId *> *) join_ids oldest_micros: (SInt64) oldest_micros youngest_micros: (SInt64) youngest_micros attributes: (NSArray<RLKeyValue *> *) attributes error_flag: (BOOL) error_flag log_records: (NSArray<RLLogRecord *> *) log_records
{
  self = [super init];
  if (self)  {
    _span_guid = span_guid;
    _span_guidIsSet = YES;
    _runtime_guid = runtime_guid;
    _runtime_guidIsSet = YES;
    _span_name = span_name;
    _span_nameIsSet = YES;
    _join_ids = [join_ids mutableCopy];
    _join_idsIsSet = YES;
    _oldest_micros = oldest_micros;
    _oldest_microsIsSet = YES;
    _youngest_micros = youngest_micros;
    _youngest_microsIsSet = YES;
    _attributes = [attributes mutableCopy];
    _attributesIsSet = YES;
    _error_flag = error_flag;
    _error_flagIsSet = YES;
    _log_records = [log_records mutableCopy];
    _log_recordsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"span_guid"])
    {
      _span_guid = [decoder decodeObjectForKey: @"span_guid"];
      _span_guidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"runtime_guid"])
    {
      _runtime_guid = [decoder decodeObjectForKey: @"runtime_guid"];
      _runtime_guidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"span_name"])
    {
      _span_name = [decoder decodeObjectForKey: @"span_name"];
      _span_nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"join_ids"])
    {
      _join_ids = [decoder decodeObjectForKey: @"join_ids"];
      _join_idsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"oldest_micros"])
    {
      _oldest_micros = [decoder decodeInt64ForKey: @"oldest_micros"];
      _oldest_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"youngest_micros"])
    {
      _youngest_micros = [decoder decodeInt64ForKey: @"youngest_micros"];
      _youngest_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"attributes"])
    {
      _attributes = [decoder decodeObjectForKey: @"attributes"];
      _attributesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"error_flag"])
    {
      _error_flag = [decoder decodeBoolForKey: @"error_flag"];
      _error_flagIsSet = YES;
    }
    if ([decoder containsValueForKey: @"log_records"])
    {
      _log_records = [decoder decodeObjectForKey: @"log_records"];
      _log_recordsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_span_guidIsSet)
  {
    [encoder encodeObject: _span_guid forKey: @"span_guid"];
  }
  if (_runtime_guidIsSet)
  {
    [encoder encodeObject: _runtime_guid forKey: @"runtime_guid"];
  }
  if (_span_nameIsSet)
  {
    [encoder encodeObject: _span_name forKey: @"span_name"];
  }
  if (_join_idsIsSet)
  {
    [encoder encodeObject: _join_ids forKey: @"join_ids"];
  }
  if (_oldest_microsIsSet)
  {
    [encoder encodeInt64: _oldest_micros forKey: @"oldest_micros"];
  }
  if (_youngest_microsIsSet)
  {
    [encoder encodeInt64: _youngest_micros forKey: @"youngest_micros"];
  }
  if (_attributesIsSet)
  {
    [encoder encodeObject: _attributes forKey: @"attributes"];
  }
  if (_error_flagIsSet)
  {
    [encoder encodeBool: _error_flag forKey: @"error_flag"];
  }
  if (_log_recordsIsSet)
  {
    [encoder encodeObject: _log_records forKey: @"log_records"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _span_guidIsSet ? 2654435761 : 0;
  if (_span_guidIsSet)
  {
    hash = (hash * 31) ^ [_span_guid hash];
  }
  hash = (hash * 31) ^ _runtime_guidIsSet ? 2654435761 : 0;
  if (_runtime_guidIsSet)
  {
    hash = (hash * 31) ^ [_runtime_guid hash];
  }
  hash = (hash * 31) ^ _span_nameIsSet ? 2654435761 : 0;
  if (_span_nameIsSet)
  {
    hash = (hash * 31) ^ [_span_name hash];
  }
  hash = (hash * 31) ^ _join_idsIsSet ? 2654435761 : 0;
  if (_join_idsIsSet)
  {
    hash = (hash * 31) ^ [_join_ids hash];
  }
  hash = (hash * 31) ^ _oldest_microsIsSet ? 2654435761 : 0;
  if (_oldest_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_oldest_micros) hash];
  }
  hash = (hash * 31) ^ _youngest_microsIsSet ? 2654435761 : 0;
  if (_youngest_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_youngest_micros) hash];
  }
  hash = (hash * 31) ^ _attributesIsSet ? 2654435761 : 0;
  if (_attributesIsSet)
  {
    hash = (hash * 31) ^ [_attributes hash];
  }
  hash = (hash * 31) ^ _error_flagIsSet ? 2654435761 : 0;
  if (_error_flagIsSet)
  {
    hash = (hash * 31) ^ [@(_error_flag) hash];
  }
  hash = (hash * 31) ^ _log_recordsIsSet ? 2654435761 : 0;
  if (_log_recordsIsSet)
  {
    hash = (hash * 31) ^ [_log_records hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLSpanRecord class]]) {
    return NO;
  }
  RLSpanRecord *other = (RLSpanRecord *)anObject;
  if ((_span_guidIsSet != other->_span_guidIsSet) ||
      (_span_guidIsSet && ((_span_guid || other->_span_guid) && ![_span_guid isEqual:other->_span_guid]))) {
    return NO;
  }
  if ((_runtime_guidIsSet != other->_runtime_guidIsSet) ||
      (_runtime_guidIsSet && ((_runtime_guid || other->_runtime_guid) && ![_runtime_guid isEqual:other->_runtime_guid]))) {
    return NO;
  }
  if ((_span_nameIsSet != other->_span_nameIsSet) ||
      (_span_nameIsSet && ((_span_name || other->_span_name) && ![_span_name isEqual:other->_span_name]))) {
    return NO;
  }
  if ((_join_idsIsSet != other->_join_idsIsSet) ||
      (_join_idsIsSet && ((_join_ids || other->_join_ids) && ![_join_ids isEqual:other->_join_ids]))) {
    return NO;
  }
  if ((_oldest_microsIsSet != other->_oldest_microsIsSet) ||
      (_oldest_microsIsSet && (_oldest_micros != other->_oldest_micros))) {
    return NO;
  }
  if ((_youngest_microsIsSet != other->_youngest_microsIsSet) ||
      (_youngest_microsIsSet && (_youngest_micros != other->_youngest_micros))) {
    return NO;
  }
  if ((_attributesIsSet != other->_attributesIsSet) ||
      (_attributesIsSet && ((_attributes || other->_attributes) && ![_attributes isEqual:other->_attributes]))) {
    return NO;
  }
  if ((_error_flagIsSet != other->_error_flagIsSet) ||
      (_error_flagIsSet && (_error_flag != other->_error_flag))) {
    return NO;
  }
  if ((_log_recordsIsSet != other->_log_recordsIsSet) ||
      (_log_recordsIsSet && ((_log_records || other->_log_records) && ![_log_records isEqual:other->_log_records]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLSpanRecord * val = [RLSpanRecord new];
  val.span_guid = [self.span_guid copy];
  val.runtime_guid = [self.runtime_guid copy];
  val.span_name = [self.span_name copy];
  val.join_ids = [self.join_ids copy];
  val.oldest_micros = self.oldest_micros;
  val.youngest_micros = self.youngest_micros;
  val.attributes = [self.attributes copy];
  val.error_flag = self.error_flag;
  val.log_records = [self.log_records copy];
  return val;
}

- (void) setSpan_guid: (NSString *) span_guid {
  _span_guid = span_guid;
  _span_guidIsSet = YES;
}

- (void) unsetSpan_guid {
  _span_guid = nil;
  _span_guidIsSet = NO;
}

- (void) setRuntime_guid: (NSString *) runtime_guid {
  _runtime_guid = runtime_guid;
  _runtime_guidIsSet = YES;
}

- (void) unsetRuntime_guid {
  _runtime_guid = nil;
  _runtime_guidIsSet = NO;
}

- (void) setSpan_name: (NSString *) span_name {
  _span_name = span_name;
  _span_nameIsSet = YES;
}

- (void) unsetSpan_name {
  _span_name = nil;
  _span_nameIsSet = NO;
}

- (void) setJoin_ids: (NSMutableArray<RLTraceJoinId *> *) join_ids {
  _join_ids = join_ids;
  _join_idsIsSet = YES;
}

- (void) unsetJoin_ids {
  _join_ids = nil;
  _join_idsIsSet = NO;
}

- (void) setOldest_micros: (SInt64) oldest_micros {
  _oldest_micros = oldest_micros;
  _oldest_microsIsSet = YES;
}

- (void) unsetOldest_micros {
  _oldest_microsIsSet = NO;
}

- (void) setYoungest_micros: (SInt64) youngest_micros {
  _youngest_micros = youngest_micros;
  _youngest_microsIsSet = YES;
}

- (void) unsetYoungest_micros {
  _youngest_microsIsSet = NO;
}

- (void) setAttributes: (NSMutableArray<RLKeyValue *> *) attributes {
  _attributes = attributes;
  _attributesIsSet = YES;
}

- (void) unsetAttributes {
  _attributes = nil;
  _attributesIsSet = NO;
}

- (void) setError_flag: (BOOL) error_flag {
  _error_flag = error_flag;
  _error_flagIsSet = YES;
}

- (void) unsetError_flag {
  _error_flagIsSet = NO;
}

- (void) setLog_records: (NSMutableArray<RLLogRecord *> *) log_records {
  _log_records = log_records;
  _log_recordsIsSet = YES;
}

- (void) unsetLog_records {
  _log_records = nil;
  _log_recordsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.span_guid = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.runtime_guid = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.span_name = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size10;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size10 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            RLTraceJoinId *_elem12 = [[RLTraceJoinId alloc] init];
            if (![_elem12 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem12];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.join_ids = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.oldest_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.youngest_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeLIST) {
          SInt32 _size13;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size13 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            RLKeyValue *_elem15 = [[RLKeyValue alloc] init];
            if (![_elem15 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem15];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.attributes = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.error_flag = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeLIST) {
          SInt32 _size16;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size16 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            RLLogRecord *_elem18 = [[RLLogRecord alloc] init];
            if (![_elem18 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem18];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.log_records = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SpanRecord" error: __thriftError]) return NO;
  if (_span_guidIsSet) {
    if (_span_guid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"span_guid" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _span_guid error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_runtime_guidIsSet) {
    if (_runtime_guid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"runtime_guid" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _runtime_guid error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_span_nameIsSet) {
    if (_span_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"span_name" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _span_name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_join_idsIsSet) {
    if (_join_ids != nil) {
      if (![outProtocol writeFieldBeginWithName: @"join_ids" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_join_ids count] error: __thriftError]) return NO;
        int idx20;
        for (idx20 = 0; idx20 < [_join_ids count]; idx20++)
        {
          if (![[_join_ids objectAtIndex: idx20] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_oldest_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"oldest_micros" type: TTypeI64 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _oldest_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_youngest_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"youngest_micros" type: TTypeI64 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _youngest_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_attributesIsSet) {
    if (_attributes != nil) {
      if (![outProtocol writeFieldBeginWithName: @"attributes" type: TTypeLIST fieldID: 8 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_attributes count] error: __thriftError]) return NO;
        int idx22;
        for (idx22 = 0; idx22 < [_attributes count]; idx22++)
        {
          if (![[_attributes objectAtIndex: idx22] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_error_flagIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"error_flag" type: TTypeBOOL fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _error_flag error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_log_recordsIsSet) {
    if (_log_records != nil) {
      if (![outProtocol writeFieldBeginWithName: @"log_records" type: TTypeLIST fieldID: 10 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_log_records count] error: __thriftError]) return NO;
        int idx24;
        for (idx24 = 0; idx24 < [_log_records count]; idx24++)
        {
          if (![[_log_records objectAtIndex: idx24] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLSpanRecord("];
  [ms appendString: @"span_guid:"];
  [ms appendFormat: @"\"%@\"", _span_guid];
  [ms appendString: @",runtime_guid:"];
  [ms appendFormat: @"\"%@\"", _runtime_guid];
  [ms appendString: @",span_name:"];
  [ms appendFormat: @"\"%@\"", _span_name];
  [ms appendString: @",join_ids:"];
  [ms appendFormat: @"%@", _join_ids];
  [ms appendString: @",oldest_micros:"];
  [ms appendFormat: @"%qi", _oldest_micros];
  [ms appendString: @",youngest_micros:"];
  [ms appendFormat: @"%qi", _youngest_micros];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", _attributes];
  [ms appendString: @",error_flag:"];
  [ms appendFormat: @"%i", _error_flag];
  [ms appendString: @",log_records:"];
  [ms appendFormat: @"%@", _log_records];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLAuth

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAccess_token: (NSString *) access_token
{
  self = [super init];
  if (self)  {
    _access_token = access_token;
    _access_tokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"access_token"])
    {
      _access_token = [decoder decodeObjectForKey: @"access_token"];
      _access_tokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_access_tokenIsSet)
  {
    [encoder encodeObject: _access_token forKey: @"access_token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _access_tokenIsSet ? 2654435761 : 0;
  if (_access_tokenIsSet)
  {
    hash = (hash * 31) ^ [_access_token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLAuth class]]) {
    return NO;
  }
  RLAuth *other = (RLAuth *)anObject;
  if ((_access_tokenIsSet != other->_access_tokenIsSet) ||
      (_access_tokenIsSet && ((_access_token || other->_access_token) && ![_access_token isEqual:other->_access_token]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLAuth * val = [RLAuth new];
  val.access_token = [self.access_token copy];
  return val;
}

- (void) setAccess_token: (NSString *) access_token {
  _access_token = access_token;
  _access_tokenIsSet = YES;
}

- (void) unsetAccess_token {
  _access_token = nil;
  _access_tokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.access_token = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Auth" error: __thriftError]) return NO;
  if (_access_tokenIsSet) {
    if (_access_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"access_token" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _access_token error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLAuth("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", _access_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLTiming

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithReceive_micros: (SInt64) receive_micros transmit_micros: (SInt64) transmit_micros
{
  self = [super init];
  if (self)  {
    _receive_micros = receive_micros;
    _receive_microsIsSet = YES;
    _transmit_micros = transmit_micros;
    _transmit_microsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"receive_micros"])
    {
      _receive_micros = [decoder decodeInt64ForKey: @"receive_micros"];
      _receive_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"transmit_micros"])
    {
      _transmit_micros = [decoder decodeInt64ForKey: @"transmit_micros"];
      _transmit_microsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_receive_microsIsSet)
  {
    [encoder encodeInt64: _receive_micros forKey: @"receive_micros"];
  }
  if (_transmit_microsIsSet)
  {
    [encoder encodeInt64: _transmit_micros forKey: @"transmit_micros"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _receive_microsIsSet ? 2654435761 : 0;
  if (_receive_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_receive_micros) hash];
  }
  hash = (hash * 31) ^ _transmit_microsIsSet ? 2654435761 : 0;
  if (_transmit_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_transmit_micros) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLTiming class]]) {
    return NO;
  }
  RLTiming *other = (RLTiming *)anObject;
  if ((_receive_microsIsSet != other->_receive_microsIsSet) ||
      (_receive_microsIsSet && (_receive_micros != other->_receive_micros))) {
    return NO;
  }
  if ((_transmit_microsIsSet != other->_transmit_microsIsSet) ||
      (_transmit_microsIsSet && (_transmit_micros != other->_transmit_micros))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLTiming * val = [RLTiming new];
  val.receive_micros = self.receive_micros;
  val.transmit_micros = self.transmit_micros;
  return val;
}

- (void) setReceive_micros: (SInt64) receive_micros {
  _receive_micros = receive_micros;
  _receive_microsIsSet = YES;
}

- (void) unsetReceive_micros {
  _receive_microsIsSet = NO;
}

- (void) setTransmit_micros: (SInt64) transmit_micros {
  _transmit_micros = transmit_micros;
  _transmit_microsIsSet = YES;
}

- (void) unsetTransmit_micros {
  _transmit_microsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.receive_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.transmit_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Timing" error: __thriftError]) return NO;
  if (_receive_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"receive_micros" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _receive_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_transmit_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"transmit_micros" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _transmit_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLTiming("];
  [ms appendString: @"receive_micros:"];
  [ms appendFormat: @"%qi", _receive_micros];
  [ms appendString: @",transmit_micros:"];
  [ms appendFormat: @"%qi", _transmit_micros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLSampleCount

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithOldest_micros: (SInt64) oldest_micros youngest_micros: (SInt64) youngest_micros count: (SInt64) count
{
  self = [super init];
  if (self)  {
    _oldest_micros = oldest_micros;
    _oldest_microsIsSet = YES;
    _youngest_micros = youngest_micros;
    _youngest_microsIsSet = YES;
    _count = count;
    _countIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"oldest_micros"])
    {
      _oldest_micros = [decoder decodeInt64ForKey: @"oldest_micros"];
      _oldest_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"youngest_micros"])
    {
      _youngest_micros = [decoder decodeInt64ForKey: @"youngest_micros"];
      _youngest_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"count"])
    {
      _count = [decoder decodeInt64ForKey: @"count"];
      _countIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_oldest_microsIsSet)
  {
    [encoder encodeInt64: _oldest_micros forKey: @"oldest_micros"];
  }
  if (_youngest_microsIsSet)
  {
    [encoder encodeInt64: _youngest_micros forKey: @"youngest_micros"];
  }
  if (_countIsSet)
  {
    [encoder encodeInt64: _count forKey: @"count"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _oldest_microsIsSet ? 2654435761 : 0;
  if (_oldest_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_oldest_micros) hash];
  }
  hash = (hash * 31) ^ _youngest_microsIsSet ? 2654435761 : 0;
  if (_youngest_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_youngest_micros) hash];
  }
  hash = (hash * 31) ^ _countIsSet ? 2654435761 : 0;
  if (_countIsSet)
  {
    hash = (hash * 31) ^ [@(_count) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLSampleCount class]]) {
    return NO;
  }
  RLSampleCount *other = (RLSampleCount *)anObject;
  if ((_oldest_microsIsSet != other->_oldest_microsIsSet) ||
      (_oldest_microsIsSet && (_oldest_micros != other->_oldest_micros))) {
    return NO;
  }
  if ((_youngest_microsIsSet != other->_youngest_microsIsSet) ||
      (_youngest_microsIsSet && (_youngest_micros != other->_youngest_micros))) {
    return NO;
  }
  if ((_countIsSet != other->_countIsSet) ||
      (_countIsSet && (_count != other->_count))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLSampleCount * val = [RLSampleCount new];
  val.oldest_micros = self.oldest_micros;
  val.youngest_micros = self.youngest_micros;
  val.count = self.count;
  return val;
}

- (void) setOldest_micros: (SInt64) oldest_micros {
  _oldest_micros = oldest_micros;
  _oldest_microsIsSet = YES;
}

- (void) unsetOldest_micros {
  _oldest_microsIsSet = NO;
}

- (void) setYoungest_micros: (SInt64) youngest_micros {
  _youngest_micros = youngest_micros;
  _youngest_microsIsSet = YES;
}

- (void) unsetYoungest_micros {
  _youngest_microsIsSet = NO;
}

- (void) setCount: (SInt64) count {
  _count = count;
  _countIsSet = YES;
}

- (void) unsetCount {
  _countIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.oldest_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.youngest_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.count = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SampleCount" error: __thriftError]) return NO;
  if (_oldest_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"oldest_micros" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _oldest_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_youngest_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"youngest_micros" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _youngest_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_countIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"count" type: TTypeI64 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _count error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLSampleCount("];
  [ms appendString: @"oldest_micros:"];
  [ms appendFormat: @"%qi", _oldest_micros];
  [ms appendString: @",youngest_micros:"];
  [ms appendFormat: @"%qi", _youngest_micros];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%qi", _count];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLReportRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRuntime: (RLRuntime *) runtime span_records: (NSArray<RLSpanRecord *> *) span_records log_records: (NSArray<RLLogRecord *> *) log_records timestamp_offset_micros: (SInt64) timestamp_offset_micros oldest_micros: (SInt64) oldest_micros youngest_micros: (SInt64) youngest_micros counters: (NSArray<RLNamedCounter *> *) counters
{
  self = [super init];
  if (self)  {
    _runtime = runtime;
    _runtimeIsSet = YES;
    _span_records = [span_records mutableCopy];
    _span_recordsIsSet = YES;
    _log_records = [log_records mutableCopy];
    _log_recordsIsSet = YES;
    _timestamp_offset_micros = timestamp_offset_micros;
    _timestamp_offset_microsIsSet = YES;
    _oldest_micros = oldest_micros;
    _oldest_microsIsSet = YES;
    _youngest_micros = youngest_micros;
    _youngest_microsIsSet = YES;
    _counters = [counters mutableCopy];
    _countersIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"runtime"])
    {
      _runtime = [decoder decodeObjectForKey: @"runtime"];
      _runtimeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"span_records"])
    {
      _span_records = [decoder decodeObjectForKey: @"span_records"];
      _span_recordsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"log_records"])
    {
      _log_records = [decoder decodeObjectForKey: @"log_records"];
      _log_recordsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timestamp_offset_micros"])
    {
      _timestamp_offset_micros = [decoder decodeInt64ForKey: @"timestamp_offset_micros"];
      _timestamp_offset_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"oldest_micros"])
    {
      _oldest_micros = [decoder decodeInt64ForKey: @"oldest_micros"];
      _oldest_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"youngest_micros"])
    {
      _youngest_micros = [decoder decodeInt64ForKey: @"youngest_micros"];
      _youngest_microsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"counters"])
    {
      _counters = [decoder decodeObjectForKey: @"counters"];
      _countersIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_runtimeIsSet)
  {
    [encoder encodeObject: _runtime forKey: @"runtime"];
  }
  if (_span_recordsIsSet)
  {
    [encoder encodeObject: _span_records forKey: @"span_records"];
  }
  if (_log_recordsIsSet)
  {
    [encoder encodeObject: _log_records forKey: @"log_records"];
  }
  if (_timestamp_offset_microsIsSet)
  {
    [encoder encodeInt64: _timestamp_offset_micros forKey: @"timestamp_offset_micros"];
  }
  if (_oldest_microsIsSet)
  {
    [encoder encodeInt64: _oldest_micros forKey: @"oldest_micros"];
  }
  if (_youngest_microsIsSet)
  {
    [encoder encodeInt64: _youngest_micros forKey: @"youngest_micros"];
  }
  if (_countersIsSet)
  {
    [encoder encodeObject: _counters forKey: @"counters"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _runtimeIsSet ? 2654435761 : 0;
  if (_runtimeIsSet)
  {
    hash = (hash * 31) ^ [_runtime hash];
  }
  hash = (hash * 31) ^ _span_recordsIsSet ? 2654435761 : 0;
  if (_span_recordsIsSet)
  {
    hash = (hash * 31) ^ [_span_records hash];
  }
  hash = (hash * 31) ^ _log_recordsIsSet ? 2654435761 : 0;
  if (_log_recordsIsSet)
  {
    hash = (hash * 31) ^ [_log_records hash];
  }
  hash = (hash * 31) ^ _timestamp_offset_microsIsSet ? 2654435761 : 0;
  if (_timestamp_offset_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_timestamp_offset_micros) hash];
  }
  hash = (hash * 31) ^ _oldest_microsIsSet ? 2654435761 : 0;
  if (_oldest_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_oldest_micros) hash];
  }
  hash = (hash * 31) ^ _youngest_microsIsSet ? 2654435761 : 0;
  if (_youngest_microsIsSet)
  {
    hash = (hash * 31) ^ [@(_youngest_micros) hash];
  }
  hash = (hash * 31) ^ _countersIsSet ? 2654435761 : 0;
  if (_countersIsSet)
  {
    hash = (hash * 31) ^ [_counters hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLReportRequest class]]) {
    return NO;
  }
  RLReportRequest *other = (RLReportRequest *)anObject;
  if ((_runtimeIsSet != other->_runtimeIsSet) ||
      (_runtimeIsSet && ((_runtime || other->_runtime) && ![_runtime isEqual:other->_runtime]))) {
    return NO;
  }
  if ((_span_recordsIsSet != other->_span_recordsIsSet) ||
      (_span_recordsIsSet && ((_span_records || other->_span_records) && ![_span_records isEqual:other->_span_records]))) {
    return NO;
  }
  if ((_log_recordsIsSet != other->_log_recordsIsSet) ||
      (_log_recordsIsSet && ((_log_records || other->_log_records) && ![_log_records isEqual:other->_log_records]))) {
    return NO;
  }
  if ((_timestamp_offset_microsIsSet != other->_timestamp_offset_microsIsSet) ||
      (_timestamp_offset_microsIsSet && (_timestamp_offset_micros != other->_timestamp_offset_micros))) {
    return NO;
  }
  if ((_oldest_microsIsSet != other->_oldest_microsIsSet) ||
      (_oldest_microsIsSet && (_oldest_micros != other->_oldest_micros))) {
    return NO;
  }
  if ((_youngest_microsIsSet != other->_youngest_microsIsSet) ||
      (_youngest_microsIsSet && (_youngest_micros != other->_youngest_micros))) {
    return NO;
  }
  if ((_countersIsSet != other->_countersIsSet) ||
      (_countersIsSet && ((_counters || other->_counters) && ![_counters isEqual:other->_counters]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLReportRequest * val = [RLReportRequest new];
  val.runtime = [self.runtime copy];
  val.span_records = [self.span_records copy];
  val.log_records = [self.log_records copy];
  val.timestamp_offset_micros = self.timestamp_offset_micros;
  val.oldest_micros = self.oldest_micros;
  val.youngest_micros = self.youngest_micros;
  val.counters = [self.counters copy];
  return val;
}

- (void) setRuntime: (RLRuntime *) runtime {
  _runtime = runtime;
  _runtimeIsSet = YES;
}

- (void) unsetRuntime {
  _runtime = nil;
  _runtimeIsSet = NO;
}

- (void) setSpan_records: (NSMutableArray<RLSpanRecord *> *) span_records {
  _span_records = span_records;
  _span_recordsIsSet = YES;
}

- (void) unsetSpan_records {
  _span_records = nil;
  _span_recordsIsSet = NO;
}

- (void) setLog_records: (NSMutableArray<RLLogRecord *> *) log_records {
  _log_records = log_records;
  _log_recordsIsSet = YES;
}

- (void) unsetLog_records {
  _log_records = nil;
  _log_recordsIsSet = NO;
}

- (void) setTimestamp_offset_micros: (SInt64) timestamp_offset_micros {
  _timestamp_offset_micros = timestamp_offset_micros;
  _timestamp_offset_microsIsSet = YES;
}

- (void) unsetTimestamp_offset_micros {
  _timestamp_offset_microsIsSet = NO;
}

- (void) setOldest_micros: (SInt64) oldest_micros {
  _oldest_micros = oldest_micros;
  _oldest_microsIsSet = YES;
}

- (void) unsetOldest_micros {
  _oldest_microsIsSet = NO;
}

- (void) setYoungest_micros: (SInt64) youngest_micros {
  _youngest_micros = youngest_micros;
  _youngest_microsIsSet = YES;
}

- (void) unsetYoungest_micros {
  _youngest_microsIsSet = NO;
}

- (void) setCounters: (NSMutableArray<RLNamedCounter *> *) counters {
  _counters = counters;
  _countersIsSet = YES;
}

- (void) unsetCounters {
  _counters = nil;
  _countersIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RLRuntime *fieldValue = [[RLRuntime alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.runtime = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeLIST) {
          SInt32 _size25;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size25 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            RLSpanRecord *_elem27 = [[RLSpanRecord alloc] init];
            if (![_elem27 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem27];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.span_records = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size28;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size28 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size28];
          int _i29;
          for (_i29 = 0; _i29 < _size28; ++_i29)
          {
            RLLogRecord *_elem30 = [[RLLogRecord alloc] init];
            if (![_elem30 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem30];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.log_records = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timestamp_offset_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.oldest_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.youngest_micros = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeLIST) {
          SInt32 _size31;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size31 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size31];
          int _i32;
          for (_i32 = 0; _i32 < _size31; ++_i32)
          {
            RLNamedCounter *_elem33 = [[RLNamedCounter alloc] init];
            if (![_elem33 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem33];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.counters = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ReportRequest" error: __thriftError]) return NO;
  if (_runtimeIsSet) {
    if (_runtime != nil) {
      if (![outProtocol writeFieldBeginWithName: @"runtime" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_runtime write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_span_recordsIsSet) {
    if (_span_records != nil) {
      if (![outProtocol writeFieldBeginWithName: @"span_records" type: TTypeLIST fieldID: 3 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_span_records count] error: __thriftError]) return NO;
        int idx35;
        for (idx35 = 0; idx35 < [_span_records count]; idx35++)
        {
          if (![[_span_records objectAtIndex: idx35] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_log_recordsIsSet) {
    if (_log_records != nil) {
      if (![outProtocol writeFieldBeginWithName: @"log_records" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_log_records count] error: __thriftError]) return NO;
        int idx37;
        for (idx37 = 0; idx37 < [_log_records count]; idx37++)
        {
          if (![[_log_records objectAtIndex: idx37] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timestamp_offset_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timestamp_offset_micros" type: TTypeI64 fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timestamp_offset_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_oldest_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"oldest_micros" type: TTypeI64 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _oldest_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_youngest_microsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"youngest_micros" type: TTypeI64 fieldID: 8 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _youngest_micros error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_countersIsSet) {
    if (_counters != nil) {
      if (![outProtocol writeFieldBeginWithName: @"counters" type: TTypeLIST fieldID: 9 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_counters count] error: __thriftError]) return NO;
        int idx39;
        for (idx39 = 0; idx39 < [_counters count]; idx39++)
        {
          if (![[_counters objectAtIndex: idx39] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReportRequest("];
  [ms appendString: @"runtime:"];
  [ms appendFormat: @"%@", _runtime];
  [ms appendString: @",span_records:"];
  [ms appendFormat: @"%@", _span_records];
  [ms appendString: @",log_records:"];
  [ms appendFormat: @"%@", _log_records];
  [ms appendString: @",timestamp_offset_micros:"];
  [ms appendFormat: @"%qi", _timestamp_offset_micros];
  [ms appendString: @",oldest_micros:"];
  [ms appendFormat: @"%qi", _oldest_micros];
  [ms appendString: @",youngest_micros:"];
  [ms appendFormat: @"%qi", _youngest_micros];
  [ms appendString: @",counters:"];
  [ms appendFormat: @"%@", _counters];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLCommand

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDisable: (BOOL) disable
{
  self = [super init];
  if (self)  {
    _disable = disable;
    _disableIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"disable"])
    {
      _disable = [decoder decodeBoolForKey: @"disable"];
      _disableIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_disableIsSet)
  {
    [encoder encodeBool: _disable forKey: @"disable"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _disableIsSet ? 2654435761 : 0;
  if (_disableIsSet)
  {
    hash = (hash * 31) ^ [@(_disable) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLCommand class]]) {
    return NO;
  }
  RLCommand *other = (RLCommand *)anObject;
  if ((_disableIsSet != other->_disableIsSet) ||
      (_disableIsSet && (_disable != other->_disable))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLCommand * val = [RLCommand new];
  val.disable = self.disable;
  return val;
}

- (void) setDisable: (BOOL) disable {
  _disable = disable;
  _disableIsSet = YES;
}

- (void) unsetDisable {
  _disableIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.disable = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Command" error: __thriftError]) return NO;
  if (_disableIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"disable" type: TTypeBOOL fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _disable error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLCommand("];
  [ms appendString: @"disable:"];
  [ms appendFormat: @"%i", _disable];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLReportResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCommands: (NSArray<RLCommand *> *) commands timing: (RLTiming *) timing errors: (NSArray<NSString *> *) errors
{
  self = [super init];
  if (self)  {
    _commands = [commands mutableCopy];
    _commandsIsSet = YES;
    _timing = timing;
    _timingIsSet = YES;
    _errors = [errors mutableCopy];
    _errorsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"commands"])
    {
      _commands = [decoder decodeObjectForKey: @"commands"];
      _commandsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"timing"])
    {
      _timing = [decoder decodeObjectForKey: @"timing"];
      _timingIsSet = YES;
    }
    if ([decoder containsValueForKey: @"errors"])
    {
      _errors = [decoder decodeObjectForKey: @"errors"];
      _errorsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_commandsIsSet)
  {
    [encoder encodeObject: _commands forKey: @"commands"];
  }
  if (_timingIsSet)
  {
    [encoder encodeObject: _timing forKey: @"timing"];
  }
  if (_errorsIsSet)
  {
    [encoder encodeObject: _errors forKey: @"errors"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _commandsIsSet ? 2654435761 : 0;
  if (_commandsIsSet)
  {
    hash = (hash * 31) ^ [_commands hash];
  }
  hash = (hash * 31) ^ _timingIsSet ? 2654435761 : 0;
  if (_timingIsSet)
  {
    hash = (hash * 31) ^ [_timing hash];
  }
  hash = (hash * 31) ^ _errorsIsSet ? 2654435761 : 0;
  if (_errorsIsSet)
  {
    hash = (hash * 31) ^ [_errors hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLReportResponse class]]) {
    return NO;
  }
  RLReportResponse *other = (RLReportResponse *)anObject;
  if ((_commandsIsSet != other->_commandsIsSet) ||
      (_commandsIsSet && ((_commands || other->_commands) && ![_commands isEqual:other->_commands]))) {
    return NO;
  }
  if ((_timingIsSet != other->_timingIsSet) ||
      (_timingIsSet && ((_timing || other->_timing) && ![_timing isEqual:other->_timing]))) {
    return NO;
  }
  if ((_errorsIsSet != other->_errorsIsSet) ||
      (_errorsIsSet && ((_errors || other->_errors) && ![_errors isEqual:other->_errors]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLReportResponse * val = [RLReportResponse new];
  val.commands = [self.commands copy];
  val.timing = [self.timing copy];
  val.errors = [self.errors copy];
  return val;
}

- (void) setCommands: (NSMutableArray<RLCommand *> *) commands {
  _commands = commands;
  _commandsIsSet = YES;
}

- (void) unsetCommands {
  _commands = nil;
  _commandsIsSet = NO;
}

- (void) setTiming: (RLTiming *) timing {
  _timing = timing;
  _timingIsSet = YES;
}

- (void) unsetTiming {
  _timing = nil;
  _timingIsSet = NO;
}

- (void) setErrors: (NSMutableArray<NSString *> *) errors {
  _errors = errors;
  _errorsIsSet = YES;
}

- (void) unsetErrors {
  _errors = nil;
  _errorsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size40;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size40 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            RLCommand *_elem42 = [[RLCommand alloc] init];
            if (![_elem42 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem42];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.commands = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RLTiming *fieldValue = [[RLTiming alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.timing = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeLIST) {
          SInt32 _size43;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size43 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size43];
          int _i44;
          for (_i44 = 0; _i44 < _size43; ++_i44)
          {
            NSString * _elem45;
            if (![inProtocol readString:&_elem45 error: __thriftError]) return NO;
            [fieldValue addObject: _elem45];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.errors = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ReportResponse" error: __thriftError]) return NO;
  if (_commandsIsSet) {
    if (_commands != nil) {
      if (![outProtocol writeFieldBeginWithName: @"commands" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_commands count] error: __thriftError]) return NO;
        int idx47;
        for (idx47 = 0; idx47 < [_commands count]; idx47++)
        {
          if (![[_commands objectAtIndex: idx47] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_timingIsSet) {
    if (_timing != nil) {
      if (![outProtocol writeFieldBeginWithName: @"timing" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_timing write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_errorsIsSet) {
    if (_errors != nil) {
      if (![outProtocol writeFieldBeginWithName: @"errors" type: TTypeLIST fieldID: 3 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRING size: (SInt32)[_errors count] error: __thriftError]) return NO;
        int idx49;
        for (idx49 = 0; idx49 < [_errors count]; idx49++)
        {
          if (![outProtocol writeString: [_errors objectAtIndex: idx49] error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReportResponse("];
  [ms appendString: @"commands:"];
  [ms appendFormat: @"%@", _commands];
  [ms appendString: @",timing:"];
  [ms appendFormat: @"%@", _timing];
  [ms appendString: @",errors:"];
  [ms appendFormat: @"%@", _errors];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *RLCroutonErrorDomain = @"RLCroutonErrorDomain";


@interface RLReportingService_Report_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RLAuth * auth;
@property (assign, nonatomic) BOOL authIsSet;
- (void) unsetAuth;

@property (strong, nonatomic) RLReportRequest * request;
@property (assign, nonatomic) BOOL requestIsSet;
- (void) unsetRequest;


- (instancetype) initWithAuth: (RLAuth *) auth request: (RLReportRequest *) request;

@end

@implementation RLReportingService_Report_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAuth: (RLAuth *) auth request: (RLReportRequest *) request
{
  self = [super init];
  if (self)  {
    _auth = auth;
    _authIsSet = YES;
    _request = request;
    _requestIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"auth"])
    {
      _auth = [decoder decodeObjectForKey: @"auth"];
      _authIsSet = YES;
    }
    if ([decoder containsValueForKey: @"request"])
    {
      _request = [decoder decodeObjectForKey: @"request"];
      _requestIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_authIsSet)
  {
    [encoder encodeObject: _auth forKey: @"auth"];
  }
  if (_requestIsSet)
  {
    [encoder encodeObject: _request forKey: @"request"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _authIsSet ? 2654435761 : 0;
  if (_authIsSet)
  {
    hash = (hash * 31) ^ [_auth hash];
  }
  hash = (hash * 31) ^ _requestIsSet ? 2654435761 : 0;
  if (_requestIsSet)
  {
    hash = (hash * 31) ^ [_request hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLReportingService_Report_args class]]) {
    return NO;
  }
  RLReportingService_Report_args *other = (RLReportingService_Report_args *)anObject;
  if ((_authIsSet != other->_authIsSet) ||
      (_authIsSet && ((_auth || other->_auth) && ![_auth isEqual:other->_auth]))) {
    return NO;
  }
  if ((_requestIsSet != other->_requestIsSet) ||
      (_requestIsSet && ((_request || other->_request) && ![_request isEqual:other->_request]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLReportingService_Report_args * val = [RLReportingService_Report_args new];
  val.auth = [self.auth copy];
  val.request = [self.request copy];
  return val;
}

- (void) setAuth: (RLAuth *) auth {
  _auth = auth;
  _authIsSet = YES;
}

- (void) unsetAuth {
  _auth = nil;
  _authIsSet = NO;
}

- (void) setRequest: (RLReportRequest *) request {
  _request = request;
  _requestIsSet = YES;
}

- (void) unsetRequest {
  _request = nil;
  _requestIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RLAuth *fieldValue = [[RLAuth alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.auth = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RLReportRequest *fieldValue = [[RLReportRequest alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.request = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ReportingService_Report_args" error: __thriftError]) return NO;
  if (_authIsSet) {
    if (_auth != nil) {
      if (![outProtocol writeFieldBeginWithName: @"auth" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_auth write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_requestIsSet) {
    if (_request != nil) {
      if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_request write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReportingService_Report_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", _auth];
  [ms appendString: @",request:"];
  [ms appendFormat: @"%@", _request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RLReportingService_Report_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RLReportResponse * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RLReportResponse *) success;

@end

@implementation RLReportingService_Report_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RLReportResponse *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RLReportingService_Report_result class]]) {
    return NO;
  }
  RLReportingService_Report_result *other = (RLReportingService_Report_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RLReportingService_Report_result * val = [RLReportingService_Report_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RLReportResponse *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RLReportResponse *fieldValue = [[RLReportResponse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"ReportingService_Report_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReportingService_Report_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RLReportingServiceClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation RLReportingServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_Report: (RLAuth *) auth request: (RLReportRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"Report" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"ReportingService_Report_args" error: __thriftError]) return NO;
  if (auth != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"auth" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![auth write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (request != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"request" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![request write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_Report: (RLReportResponse * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RLReportingService_Report_result * resulter = [RLReportingService_Report_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"Report"}];
  }
  return NO;
}

- (RLReportResponse *) Report: (RLAuth *) auth request: (RLReportRequest *) request error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_Report : auth request: request error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RLReportResponse * __result;
  if (![self recv_Report: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface RLReportingServiceProcessor () {
  id <RLReportingService> service;
  NSDictionary * methodMap;
}
@end

@implementation RLReportingServiceProcessor

- (id) initWithReportingService: (id <RLReportingService>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_Report_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"Report"];
    }
  }
  return self;
}

- (id<RLReportingService>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_Report_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RLReportingService_Report_args * args = [RLReportingService_Report_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RLReportingService_Report_result * result = [RLReportingService_Report_result new];
  RLReportResponse * serviceResult = [service Report: [args auth] request: [args request] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"Report"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end


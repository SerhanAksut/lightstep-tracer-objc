// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "google/protobuf/Timestamp.pbobjc.h"
#endif

 #import "Collector.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - LSPBCollectorRoot

@implementation LSPBCollectorRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[GPBTimestampRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LSPBCollectorRoot_FileDescriptor

static GPBFileDescriptor *LSPBCollectorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"lightstep.collector"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - LSPBSpanContext

@implementation LSPBSpanContext

@dynamic traceId;
@dynamic spanId;
@dynamic baggage, baggage_Count;

typedef struct LSPBSpanContext__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *baggage;
  uint64_t traceId;
  uint64_t spanId;
} LSPBSpanContext__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "traceId",
        .dataTypeSpecific.className = NULL,
        .number = LSPBSpanContext_FieldNumber_TraceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBSpanContext__storage_, traceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "spanId",
        .dataTypeSpecific.className = NULL,
        .number = LSPBSpanContext_FieldNumber_SpanId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LSPBSpanContext__storage_, spanId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "baggage",
        .dataTypeSpecific.className = NULL,
        .number = LSPBSpanContext_FieldNumber_Baggage,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBSpanContext__storage_, baggage),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBSpanContext class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBSpanContext__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBKeyValue

@implementation LSPBKeyValue

@dynamic valueOneOfCase;
@dynamic key;
@dynamic stringValue;
@dynamic intValue;
@dynamic doubleValue;
@dynamic boolValue;

typedef struct LSPBKeyValue__storage_ {
  uint32_t _has_storage_[2];
  NSString *key;
  NSString *stringValue;
  int64_t intValue;
  double doubleValue;
} LSPBKeyValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = LSPBKeyValue_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBKeyValue__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.className = NULL,
        .number = LSPBKeyValue_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LSPBKeyValue__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intValue",
        .dataTypeSpecific.className = NULL,
        .number = LSPBKeyValue_FieldNumber_IntValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LSPBKeyValue__storage_, intValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "doubleValue",
        .dataTypeSpecific.className = NULL,
        .number = LSPBKeyValue_FieldNumber_DoubleValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LSPBKeyValue__storage_, doubleValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.className = NULL,
        .number = LSPBKeyValue_FieldNumber_BoolValue,
        .hasIndex = -1,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBKeyValue class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBKeyValue__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "value",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void LSPBKeyValue_ClearValueOneOfCase(LSPBKeyValue *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - LSPBLog

@implementation LSPBLog

@dynamic hasTimestamp, timestamp;
@dynamic keyvaluesArray, keyvaluesArray_Count;

typedef struct LSPBLog__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *timestamp;
  NSMutableArray *keyvaluesArray;
} LSPBLog__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = LSPBLog_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBLog__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyvaluesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBKeyValue),
        .number = LSPBLog_FieldNumber_KeyvaluesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBLog__storage_, keyvaluesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBLog class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBLog__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBReference

@implementation LSPBReference

@dynamic relationship;
@dynamic hasSpanContext, spanContext;

typedef struct LSPBReference__storage_ {
  uint32_t _has_storage_[1];
  LSPBReference_Relationship relationship;
  LSPBSpanContext *spanContext;
} LSPBReference__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relationship",
        .dataTypeSpecific.enumDescFunc = LSPBReference_Relationship_EnumDescriptor,
        .number = LSPBReference_FieldNumber_Relationship,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBReference__storage_, relationship),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "spanContext",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBSpanContext),
        .number = LSPBReference_FieldNumber_SpanContext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LSPBReference__storage_, spanContext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBReference class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBReference__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LSPBReference_Relationship_RawValue(LSPBReference *message) {
  GPBDescriptor *descriptor = [LSPBReference descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LSPBReference_FieldNumber_Relationship];
  return GPBGetMessageInt32Field(message, field);
}

void SetLSPBReference_Relationship_RawValue(LSPBReference *message, int32_t value) {
  GPBDescriptor *descriptor = [LSPBReference descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LSPBReference_FieldNumber_Relationship];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum LSPBReference_Relationship

GPBEnumDescriptor *LSPBReference_Relationship_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ChildOf\000FollowsFrom\000";
    static const int32_t values[] = {
        LSPBReference_Relationship_ChildOf,
        LSPBReference_Relationship_FollowsFrom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LSPBReference_Relationship)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LSPBReference_Relationship_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LSPBReference_Relationship_IsValidValue(int32_t value__) {
  switch (value__) {
    case LSPBReference_Relationship_ChildOf:
    case LSPBReference_Relationship_FollowsFrom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LSPBSpan

@implementation LSPBSpan

@dynamic hasSpanContext, spanContext;
@dynamic operationName;
@dynamic referencesArray, referencesArray_Count;
@dynamic hasStartTimestamp, startTimestamp;
@dynamic durationMicros;
@dynamic tagsArray, tagsArray_Count;
@dynamic logsArray, logsArray_Count;

typedef struct LSPBSpan__storage_ {
  uint32_t _has_storage_[1];
  LSPBSpanContext *spanContext;
  NSString *operationName;
  NSMutableArray *referencesArray;
  GPBTimestamp *startTimestamp;
  NSMutableArray *tagsArray;
  NSMutableArray *logsArray;
  uint64_t durationMicros;
} LSPBSpan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spanContext",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBSpanContext),
        .number = LSPBSpan_FieldNumber_SpanContext,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, spanContext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "operationName",
        .dataTypeSpecific.className = NULL,
        .number = LSPBSpan_FieldNumber_OperationName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, operationName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "referencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBReference),
        .number = LSPBSpan_FieldNumber_ReferencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, referencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startTimestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = LSPBSpan_FieldNumber_StartTimestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, startTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "durationMicros",
        .dataTypeSpecific.className = NULL,
        .number = LSPBSpan_FieldNumber_DurationMicros,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, durationMicros),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBKeyValue),
        .number = LSPBSpan_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBLog),
        .number = LSPBSpan_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBSpan__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBSpan class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBSpan__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBTracer

@implementation LSPBTracer

@dynamic tracerId;
@dynamic tagsArray, tagsArray_Count;

typedef struct LSPBTracer__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tagsArray;
  uint64_t tracerId;
} LSPBTracer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tracerId",
        .dataTypeSpecific.className = NULL,
        .number = LSPBTracer_FieldNumber_TracerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBTracer__storage_, tracerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBKeyValue),
        .number = LSPBTracer_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBTracer__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBTracer class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBTracer__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBMetricsSample

@implementation LSPBMetricsSample

@dynamic valueOneOfCase;
@dynamic name;
@dynamic intValue;
@dynamic doubleValue;

typedef struct LSPBMetricsSample__storage_ {
  uint32_t _has_storage_[2];
  NSString *name;
  int64_t intValue;
  double doubleValue;
} LSPBMetricsSample__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = LSPBMetricsSample_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBMetricsSample__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "intValue",
        .dataTypeSpecific.className = NULL,
        .number = LSPBMetricsSample_FieldNumber_IntValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LSPBMetricsSample__storage_, intValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "doubleValue",
        .dataTypeSpecific.className = NULL,
        .number = LSPBMetricsSample_FieldNumber_DoubleValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LSPBMetricsSample__storage_, doubleValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBMetricsSample class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBMetricsSample__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "value",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void LSPBMetricsSample_ClearValueOneOfCase(LSPBMetricsSample *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - LSPBInternalMetrics

@implementation LSPBInternalMetrics

@dynamic hasStartTimestamp, startTimestamp;
@dynamic durationMicros;
@dynamic logsArray, logsArray_Count;
@dynamic countsArray, countsArray_Count;
@dynamic gaugesArray, gaugesArray_Count;

typedef struct LSPBInternalMetrics__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *startTimestamp;
  NSMutableArray *logsArray;
  NSMutableArray *countsArray;
  NSMutableArray *gaugesArray;
  uint64_t durationMicros;
} LSPBInternalMetrics__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTimestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = LSPBInternalMetrics_FieldNumber_StartTimestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBInternalMetrics__storage_, startTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "durationMicros",
        .dataTypeSpecific.className = NULL,
        .number = LSPBInternalMetrics_FieldNumber_DurationMicros,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LSPBInternalMetrics__storage_, durationMicros),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "logsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBLog),
        .number = LSPBInternalMetrics_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBInternalMetrics__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "countsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBMetricsSample),
        .number = LSPBInternalMetrics_FieldNumber_CountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBInternalMetrics__storage_, countsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gaugesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBMetricsSample),
        .number = LSPBInternalMetrics_FieldNumber_GaugesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBInternalMetrics__storage_, gaugesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBInternalMetrics class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBInternalMetrics__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBAuth

@implementation LSPBAuth

@dynamic accessToken;

typedef struct LSPBAuth__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessToken;
} LSPBAuth__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = LSPBAuth_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBAuth__storage_, accessToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBAuth class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBAuth__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBReportRequest

@implementation LSPBReportRequest

@dynamic hasTracer, tracer;
@dynamic hasAuth, auth;
@dynamic spansArray, spansArray_Count;
@dynamic timestampOffsetMicros;
@dynamic hasInternalMetrics, internalMetrics;

typedef struct LSPBReportRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t timestampOffsetMicros;
  LSPBTracer *tracer;
  LSPBAuth *auth;
  NSMutableArray *spansArray;
  LSPBInternalMetrics *internalMetrics;
} LSPBReportRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tracer",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBTracer),
        .number = LSPBReportRequest_FieldNumber_Tracer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBReportRequest__storage_, tracer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "auth",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBAuth),
        .number = LSPBReportRequest_FieldNumber_Auth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LSPBReportRequest__storage_, auth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "spansArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBSpan),
        .number = LSPBReportRequest_FieldNumber_SpansArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBReportRequest__storage_, spansArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timestampOffsetMicros",
        .dataTypeSpecific.className = NULL,
        .number = LSPBReportRequest_FieldNumber_TimestampOffsetMicros,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LSPBReportRequest__storage_, timestampOffsetMicros),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "internalMetrics",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBInternalMetrics),
        .number = LSPBReportRequest_FieldNumber_InternalMetrics,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LSPBReportRequest__storage_, internalMetrics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBReportRequest class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBReportRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBCommand

@implementation LSPBCommand

@dynamic disable;

typedef struct LSPBCommand__storage_ {
  uint32_t _has_storage_[1];
} LSPBCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "disable",
        .dataTypeSpecific.className = NULL,
        .number = LSPBCommand_FieldNumber_Disable,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBCommand class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBCommand__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LSPBReportResponse

@implementation LSPBReportResponse

@dynamic commandsArray, commandsArray_Count;
@dynamic hasReceiveTimestamp, receiveTimestamp;
@dynamic hasTransmitTimestamp, transmitTimestamp;
@dynamic errorsArray, errorsArray_Count;

typedef struct LSPBReportResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commandsArray;
  GPBTimestamp *receiveTimestamp;
  GPBTimestamp *transmitTimestamp;
  NSMutableArray *errorsArray;
} LSPBReportResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commandsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LSPBCommand),
        .number = LSPBReportResponse_FieldNumber_CommandsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBReportResponse__storage_, commandsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receiveTimestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = LSPBReportResponse_FieldNumber_ReceiveTimestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LSPBReportResponse__storage_, receiveTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transmitTimestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = LSPBReportResponse_FieldNumber_TransmitTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LSPBReportResponse__storage_, transmitTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errorsArray",
        .dataTypeSpecific.className = NULL,
        .number = LSPBReportResponse_FieldNumber_ErrorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LSPBReportResponse__storage_, errorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LSPBReportResponse class]
                                     rootClass:[LSPBCollectorRoot class]
                                          file:LSPBCollectorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LSPBReportResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
